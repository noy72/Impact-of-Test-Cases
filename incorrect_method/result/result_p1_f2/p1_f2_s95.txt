2019-07-16 18:57:46 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
targetProject = .
executionTests = []
workingDir = /var/folders/fb/qqrpbwjd7cg3mc3d5hghr7k40000gn/T/kgenprog-work1695125683188702008
outDir = kgenprog-out
mutationGeneratingCount = 100
crossoverGeneratingCount = 100
headcount = 100
maxGeneration = 100
timeLimit = PT3M
testTimeLimit = PT30S
requiredSolutionsCount = 1
logLevel = INFO
randomSeed = 95
scope = PACKAGE
needNotOutput = false
currentDirectory = /Users/noy/Dropbox/研究/APRとテストケースの関係/2019study/src2/incorrect_method
================================================================
2019-07-16 18:57:48 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2019-07-16 18:57:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 seconds
Variants: generated 100, syntax-valid 58, build-succeeded 12
Fitness: max 0.16666666666666666(10), min 0.0(2), ave 0.13888888888888887
----------------------------------------------------------------

2019-07-16 18:57:52 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2019-07-16 18:57:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 seconds
Variants: generated 100, syntax-valid 67, build-succeeded 14
Fitness: max 0.16666666666666666(8), min 0.0(6), ave 0.09523809523809523
----------------------------------------------------------------

2019-07-16 18:57:56 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2019-07-16 18:58:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 seconds
Variants: generated 100, syntax-valid 66, build-succeeded 6
Fitness: max 0.16666666666666666(6), min 0.16666666666666666(6), ave 0.16666666666666666
----------------------------------------------------------------

2019-07-16 18:58:00 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2019-07-16 18:58:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 seconds
Variants: generated 100, syntax-valid 68, build-succeeded 12
Fitness: max 0.16666666666666666(7), min 0.0(5), ave 0.09722222222222221
----------------------------------------------------------------

2019-07-16 18:58:04 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2019-07-16 18:58:07 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 seconds
Variants: generated 102, syntax-valid 75, build-succeeded 13
Fitness: max 0.16666666666666666(9), min 0.0(4), ave 0.11538461538461539
----------------------------------------------------------------

2019-07-16 18:58:07 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2019-07-16 18:58:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 seconds
Variants: generated 102, syntax-valid 72, build-succeeded 12
Fitness: max 0.16666666666666666(10), min 0.0(2), ave 0.13888888888888887
----------------------------------------------------------------

2019-07-16 18:58:10 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2019-07-16 18:58:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 seconds
Variants: generated 104, syntax-valid 74, build-succeeded 16
Fitness: max 0.16666666666666666(11), min 0.0(5), ave 0.11458333333333333
----------------------------------------------------------------

2019-07-16 18:58:14 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2019-07-16 18:58:17 [main] [INFO]  KGenProgMain - found enough solutions.
2019-07-16 18:58:17 [main] [INFO]  Patch - 
--- incorrect_method.Class1
+++ incorrect_method.Class1
@@ -8,6 +8,7 @@
 		int x, y;
 		x = sample.pow(a) % list.size();
 		y = sample.pow(a, n) % list.size();
+		y = sample.pow(a, n) % list.size();
 
 		ArrayList<Integer> subList = sample.getSubList(list, x, y);
 		if(subList == null) {
@@ -16,9 +17,8 @@
 
 		int sum = 0;
 		for(int i : subList) {
-			if(i >= l && i <= h) {
-				sum += sample.pow(i); // bug here
-			}
+			if(i >= l && i <= h)
+				sum += sample.fact(i);
 		}
 		return sum;
 	}
2019-07-16 18:58:17 [main] [INFO]  Patch - 
--- incorrect_method.Class2
+++ incorrect_method.Class2
@@ -8,9 +8,8 @@
 
 	public int pow(int a, int n) {
 		int res = 1;
-		for(int i = 0; i < n; i++) {
+		for(int i = 0; i < n; i++)
 			res *= a;
-		}
 		return res;
 	}
 
2019-07-16 18:58:18 [main] [INFO]  KGenProgMain - execution time: 29 seconds
