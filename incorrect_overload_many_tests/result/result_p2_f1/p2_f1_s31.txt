2019-07-16 15:06:38 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
targetProject = .
executionTests = []
workingDir = /var/folders/fb/qqrpbwjd7cg3mc3d5hghr7k40000gn/T/kgenprog-work6538983933507334696
outDir = kgenprog-out
mutationGeneratingCount = 100
crossoverGeneratingCount = 100
headcount = 100
maxGeneration = 100
timeLimit = PT6M
testTimeLimit = PT1M
requiredSolutionsCount = 1
logLevel = INFO
randomSeed = 31
scope = PACKAGE
needNotOutput = false
currentDirectory = /Users/noy/Dropbox/研究/APRとテストケースの関係/2019study/src2/incorrect_overload_many_tests
================================================================
2019-07-16 15:06:42 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2019-07-16 15:06:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 seconds
Variants: generated 100, syntax-valid 54, build-succeeded 8
Fitness: max 0.8888888888888888(4), min 0.0(2), ave 0.45555555555555555
----------------------------------------------------------------

2019-07-16 15:06:45 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2019-07-16 15:06:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 seconds
Variants: generated 100, syntax-valid 66, build-succeeded 11
Fitness: max 0.8888888888888888(4), min 0.0(4), ave 0.33535353535353535
----------------------------------------------------------------

2019-07-16 15:06:48 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2019-07-16 15:06:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 seconds
Variants: generated 100, syntax-valid 64, build-succeeded 14
Fitness: max 0.8888888888888888(6), min 0.0(3), ave 0.3968253968253968
----------------------------------------------------------------

2019-07-16 15:06:51 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2019-07-16 15:06:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 seconds
Variants: generated 100, syntax-valid 71, build-succeeded 13
Fitness: max 0.8888888888888888(2), min 0.0(6), ave 0.15384615384615385
----------------------------------------------------------------

2019-07-16 15:06:54 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2019-07-16 15:06:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 seconds
Variants: generated 104, syntax-valid 70, build-succeeded 15
Fitness: max 0.8888888888888888(7), min 0.0(3), ave 0.4755555555555555
----------------------------------------------------------------

2019-07-16 15:06:58 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2019-07-16 15:07:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 seconds
Variants: generated 108, syntax-valid 75, build-succeeded 21
Fitness: max 0.8888888888888888(7), min 0.0(5), ave 0.3153439153439153
----------------------------------------------------------------

2019-07-16 15:07:02 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2019-07-16 15:07:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 24 seconds
Variants: generated 120, syntax-valid 78, build-succeeded 17
Fitness: max 0.8888888888888888(5), min 0.0(5), ave 0.2797385620915033
----------------------------------------------------------------

2019-07-16 15:07:06 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2019-07-16 15:07:10 [main] [INFO]  KGenProgMain - found enough solutions.
2019-07-16 15:07:11 [main] [INFO]  Patch - 
--- incorrect_overload_many_tests.Class1
+++ incorrect_overload_many_tests.Class1
@@ -6,8 +6,9 @@
 		Class2 sample = new Class2();
 
 		int x, y;
-		x = sample.pow(a, n) % list.size(); // bug here
+		x = sample.pow(a, n) % list.size();
 		y = sample.pow(a, n) % list.size();
+		x = sample.pow(a) % list.size();
 
 		ArrayList<Integer> subList = sample.getSubList(list, x, y);
 		if(subList == null) {
2019-07-16 15:07:11 [main] [INFO]  Patch - 
--- incorrect_overload_many_tests.Class2
+++ incorrect_overload_many_tests.Class2
@@ -8,6 +8,7 @@
 
 	public int pow(int a, int n) {
 		int res = 1;
+		int sum = 0;
 		for(int i = 0; i < n; i++) {
 			res *= a;
 		}
2019-07-16 15:07:11 [main] [INFO]  KGenProgMain - execution time: 29 seconds
