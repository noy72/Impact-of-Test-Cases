2019-07-16 16:15:43 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
targetProject = .
executionTests = []
workingDir = /var/folders/fb/qqrpbwjd7cg3mc3d5hghr7k40000gn/T/kgenprog-work580759639476099940
outDir = kgenprog-out
mutationGeneratingCount = 100
crossoverGeneratingCount = 100
headcount = 100
maxGeneration = 100
timeLimit = PT6M
testTimeLimit = PT1M
requiredSolutionsCount = 1
logLevel = INFO
randomSeed = 90
scope = PACKAGE
needNotOutput = false
currentDirectory = /Users/noy/Dropbox/研究/APRとテストケースの関係/2019study/src2/incorrect_overload_many_tests
================================================================
2019-07-16 16:15:45 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2019-07-16 16:15:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 seconds
Variants: generated 100, syntax-valid 58, build-succeeded 7
Fitness: max 0.8888888888888888(5), min 0.0(1), ave 0.6412698412698413
----------------------------------------------------------------

2019-07-16 16:15:48 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2019-07-16 16:15:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 seconds
Variants: generated 100, syntax-valid 66, build-succeeded 9
Fitness: max 0.8888888888888888(4), min 0.0(1), ave 0.41481481481481475
----------------------------------------------------------------

2019-07-16 16:15:51 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2019-07-16 16:15:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 seconds
Variants: generated 100, syntax-valid 74, build-succeeded 11
Fitness: max 0.8888888888888888(3), min 0.0(4), ave 0.25858585858585853
----------------------------------------------------------------

2019-07-16 16:15:54 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2019-07-16 16:15:57 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 seconds
Variants: generated 100, syntax-valid 70, build-succeeded 11
Fitness: max 0.8888888888888888(4), min 0.0(3), ave 0.33939393939393936
----------------------------------------------------------------

2019-07-16 16:15:57 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2019-07-16 16:16:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 seconds
Variants: generated 108, syntax-valid 73, build-succeeded 13
Fitness: max 0.8888888888888888(5), min 0.0(6), ave 0.3487179487179487
----------------------------------------------------------------

2019-07-16 16:16:00 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2019-07-16 16:16:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 seconds
Variants: generated 100, syntax-valid 66, build-succeeded 8
Fitness: max 0.8888888888888888(4), min 0.0(2), ave 0.4555555555555555
----------------------------------------------------------------

2019-07-16 16:16:02 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2019-07-16 16:16:06 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 seconds
Variants: generated 112, syntax-valid 72, build-succeeded 13
Fitness: max 0.8888888888888888(4), min 0.0(3), ave 0.29401709401709397
----------------------------------------------------------------

2019-07-16 16:16:06 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2019-07-16 16:16:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 seconds
Variants: generated 126, syntax-valid 72, build-succeeded 19
Fitness: max 0.8888888888888888(7), min 0.0(2), ave 0.3508771929824561
----------------------------------------------------------------

2019-07-16 16:16:09 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2019-07-16 16:16:12 [main] [INFO]  KGenProgMain - found enough solutions.
2019-07-16 16:16:12 [main] [INFO]  Patch - 
--- incorrect_overload_many_tests.Class1
+++ incorrect_overload_many_tests.Class1
@@ -7,6 +7,7 @@
 
 		int x, y;
 		x = sample.pow(a, n) % list.size(); // bug here
+		x = sample.pow(a) % list.size();
 		y = sample.pow(a, n) % list.size();
 
 		ArrayList<Integer> subList = sample.getSubList(list, x, y);
2019-07-16 16:16:12 [main] [INFO]  Patch - 
--- incorrect_overload_many_tests.Class2
+++ incorrect_overload_many_tests.Class2
@@ -8,6 +8,7 @@
 
 	public int pow(int a, int n) {
 		int res = 1;
+		int sum = 0;
 		for(int i = 0; i < n; i++) {
 			res *= a;
 		}
2019-07-16 16:16:13 [main] [INFO]  KGenProgMain - execution time: 27 seconds
