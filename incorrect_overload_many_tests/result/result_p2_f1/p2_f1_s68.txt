2019-07-16 15:54:31 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
targetProject = .
executionTests = []
workingDir = /var/folders/fb/qqrpbwjd7cg3mc3d5hghr7k40000gn/T/kgenprog-work5432307723772820945
outDir = kgenprog-out
mutationGeneratingCount = 100
crossoverGeneratingCount = 100
headcount = 100
maxGeneration = 100
timeLimit = PT6M
testTimeLimit = PT1M
requiredSolutionsCount = 1
logLevel = INFO
randomSeed = 68
scope = PACKAGE
needNotOutput = false
currentDirectory = /Users/noy/Dropbox/研究/APRとテストケースの関係/2019study/src2/incorrect_overload_many_tests
================================================================
2019-07-16 15:54:34 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2019-07-16 15:54:38 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 seconds
Variants: generated 100, syntax-valid 59, build-succeeded 11
Fitness: max 0.8888888888888888(7), min 0.0(2), ave 0.5737373737373738
----------------------------------------------------------------

2019-07-16 15:54:38 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2019-07-16 15:54:42 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 seconds
Variants: generated 100, syntax-valid 78, build-succeeded 14
Fitness: max 0.8888888888888888(6), min 0.0(4), ave 0.39365079365079364
----------------------------------------------------------------

2019-07-16 15:54:42 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2019-07-16 15:54:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 seconds
Variants: generated 100, syntax-valid 70, build-succeeded 17
Fitness: max 0.8888888888888888(7), min 0.0(3), ave 0.38431372549019605
----------------------------------------------------------------

2019-07-16 15:54:45 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2019-07-16 15:54:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 seconds
Variants: generated 100, syntax-valid 79, build-succeeded 18
Fitness: max 0.8888888888888888(7), min 0.0(4), ave 0.36296296296296293
----------------------------------------------------------------

2019-07-16 15:54:48 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2019-07-16 15:54:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 seconds
Variants: generated 102, syntax-valid 80, build-succeeded 18
Fitness: max 0.8888888888888888(8), min 0.0(3), ave 0.41234567901234565
----------------------------------------------------------------

2019-07-16 15:54:51 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2019-07-16 15:54:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 seconds
Variants: generated 118, syntax-valid 82, build-succeeded 20
Fitness: max 0.8888888888888888(7), min 0.0(5), ave 0.35666666666666663
----------------------------------------------------------------

2019-07-16 15:54:55 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2019-07-16 15:54:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 seconds
Variants: generated 138, syntax-valid 86, build-succeeded 24
Fitness: max 0.8888888888888888(7), min 0.0(3), ave 0.28518518518518515
----------------------------------------------------------------

2019-07-16 15:54:58 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2019-07-16 15:55:01 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 seconds
Variants: generated 144, syntax-valid 85, build-succeeded 27
Fitness: max 0.8888888888888888(12), min 0.0(2), ave 0.4164609053497942
----------------------------------------------------------------

2019-07-16 15:55:01 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2019-07-16 15:55:04 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 seconds
Variants: generated 146, syntax-valid 78, build-succeeded 25
Fitness: max 0.8888888888888888(13), min 0.0(5), ave 0.4746666666666666
----------------------------------------------------------------

2019-07-16 15:55:04 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2019-07-16 15:55:08 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 33 seconds
Variants: generated 144, syntax-valid 86, build-succeeded 27
Fitness: max 0.8888888888888888(17), min 0.0(6), ave 0.5695473251028806
----------------------------------------------------------------

2019-07-16 15:55:08 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2019-07-16 15:55:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 seconds
Variants: generated 154, syntax-valid 90, build-succeeded 22
Fitness: max 0.8888888888888888(13), min 0.0(2), ave 0.5393939393939393
----------------------------------------------------------------

2019-07-16 15:55:11 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2019-07-16 15:55:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 seconds
Variants: generated 154, syntax-valid 84, build-succeeded 24
Fitness: max 0.8888888888888888(16), min 0.0(7), ave 0.5944444444444444
----------------------------------------------------------------

2019-07-16 15:55:14 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2019-07-16 15:55:18 [main] [INFO]  KGenProgMain - found enough solutions.
2019-07-16 15:55:18 [main] [INFO]  Patch - 
--- incorrect_overload_many_tests.Class1
+++ incorrect_overload_many_tests.Class1
@@ -8,6 +8,8 @@
 		int x, y;
 		x = sample.pow(a, n) % list.size(); // bug here
 		y = sample.pow(a, n) % list.size();
+		x = sample.pow(a) % list.size();
+		y = sample.pow(a, n) % list.size();
 
 		ArrayList<Integer> subList = sample.getSubList(list, x, y);
 		if(subList == null) {
2019-07-16 15:55:18 [main] [INFO]  Patch - 
--- incorrect_overload_many_tests.Class2
+++ incorrect_overload_many_tests.Class2
@@ -24,9 +24,8 @@
 
 
 	public ArrayList<Integer> getSubList(ArrayList<Integer> list, int l, int r){
-		if(l < 0 || r >= list.size() || l >= r) {
+		if(l < 0 || r >= list.size() || l >= r)
 			return null;
-		}
 
 		ArrayList<Integer> res = new ArrayList<Integer>();
 		for(; l < r; l++) {
2019-07-16 15:55:19 [main] [INFO]  KGenProgMain - execution time: 44 seconds
