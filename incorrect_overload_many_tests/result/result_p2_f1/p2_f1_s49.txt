2019-07-16 15:27:41 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
targetProject = .
executionTests = []
workingDir = /var/folders/fb/qqrpbwjd7cg3mc3d5hghr7k40000gn/T/kgenprog-work3342317050419252401
outDir = kgenprog-out
mutationGeneratingCount = 100
crossoverGeneratingCount = 100
headcount = 100
maxGeneration = 100
timeLimit = PT6M
testTimeLimit = PT1M
requiredSolutionsCount = 1
logLevel = INFO
randomSeed = 49
scope = PACKAGE
needNotOutput = false
currentDirectory = /Users/noy/Dropbox/研究/APRとテストケースの関係/2019study/src2/incorrect_overload_many_tests
================================================================
2019-07-16 15:27:44 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2019-07-16 15:27:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 seconds
Variants: generated 100, syntax-valid 64, build-succeeded 11
Fitness: max 0.8888888888888888(8), min 0.0(2), ave 0.6505050505050505
----------------------------------------------------------------

2019-07-16 15:27:48 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2019-07-16 15:27:51 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 seconds
Variants: generated 100, syntax-valid 66, build-succeeded 13
Fitness: max 0.8888888888888888(6), min 0.0(6), ave 0.41367521367521365
----------------------------------------------------------------

2019-07-16 15:27:51 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2019-07-16 15:27:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 seconds
Variants: generated 100, syntax-valid 77, build-succeeded 10
Fitness: max 0.8888888888888888(7), min 0.0(2), ave 0.7
----------------------------------------------------------------

2019-07-16 15:27:55 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2019-07-16 15:27:58 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 seconds
Variants: generated 100, syntax-valid 73, build-succeeded 15
Fitness: max 0.8888888888888888(10), min 0.0(2), ave 0.6503703703703703
----------------------------------------------------------------

2019-07-16 15:27:58 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2019-07-16 15:28:02 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 seconds
Variants: generated 104, syntax-valid 62, build-succeeded 12
Fitness: max 0.8888888888888888(2), min 0.0(4), ave 0.17037037037037037
----------------------------------------------------------------

2019-07-16 15:28:02 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2019-07-16 15:28:05 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 21 seconds
Variants: generated 108, syntax-valid 76, build-succeeded 12
Fitness: max 0.8888888888888888(5), min 0.0(4), ave 0.4425925925925926
----------------------------------------------------------------

2019-07-16 15:28:05 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2019-07-16 15:28:09 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 seconds
Variants: generated 112, syntax-valid 73, build-succeeded 14
Fitness: max 0.8888888888888888(8), min 0.0(2), ave 0.6253968253968253
----------------------------------------------------------------

2019-07-16 15:28:09 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2019-07-16 15:28:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 seconds
Variants: generated 124, syntax-valid 83, build-succeeded 20
Fitness: max 0.8888888888888888(7), min 0.0(6), ave 0.3988888888888889
----------------------------------------------------------------

2019-07-16 15:28:13 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2019-07-16 15:28:18 [main] [INFO]  KGenProgMain - found enough solutions.
2019-07-16 15:28:18 [main] [INFO]  Patch - 
--- incorrect_overload_many_tests.Class1
+++ incorrect_overload_many_tests.Class1
@@ -6,7 +6,7 @@
 		Class2 sample = new Class2();
 
 		int x, y;
-		x = sample.pow(a, n) % list.size(); // bug here
+		x = sample.pow(a) % list.size();
 		y = sample.pow(a, n) % list.size();
 
 		ArrayList<Integer> subList = sample.getSubList(list, x, y);
2019-07-16 15:28:18 [main] [INFO]  Patch - 
--- incorrect_overload_many_tests.Class2
+++ incorrect_overload_many_tests.Class2
@@ -8,6 +8,8 @@
 
 	public int pow(int a, int n) {
 		int res = 1;
+		for (int i = 0; i < n; i++) {
+		}
 		for(int i = 0; i < n; i++) {
 			res *= a;
 		}
@@ -16,6 +18,7 @@
 
 	public int fact(int n) {
 		int res = 1;
+		int x, y;
 		for(int i = 1; i <= n; i++) {
 			res *= i;
 		}
2019-07-16 15:28:18 [main] [INFO]  KGenProgMain - execution time: 34 seconds
