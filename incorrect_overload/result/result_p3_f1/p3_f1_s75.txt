2019-07-16 17:09:27 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
targetProject = .
executionTests = []
workingDir = /var/folders/fb/qqrpbwjd7cg3mc3d5hghr7k40000gn/T/kgenprog-work6940212355292324432
outDir = kgenprog-out
mutationGeneratingCount = 100
crossoverGeneratingCount = 100
headcount = 100
maxGeneration = 100
timeLimit = PT3M
testTimeLimit = PT30S
requiredSolutionsCount = 1
logLevel = INFO
randomSeed = 75
scope = PACKAGE
needNotOutput = false
currentDirectory = /Users/noy/Dropbox/研究/APRとテストケースの関係/2019study/src2/incorrect_overload
================================================================
2019-07-16 17:09:30 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2019-07-16 17:09:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 seconds
Variants: generated 100, syntax-valid 55, build-succeeded 11
Fitness: max 0.9090909090909091(7), min 0.0(1), ave 0.6033057851239669
----------------------------------------------------------------

2019-07-16 17:09:34 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2019-07-16 17:09:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 seconds
Variants: generated 100, syntax-valid 74, build-succeeded 11
Fitness: max 0.9090909090909091(3), min 0.0(6), ave 0.2644628099173554
----------------------------------------------------------------

2019-07-16 17:09:37 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2019-07-16 17:09:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 seconds
Variants: generated 100, syntax-valid 73, build-succeeded 9
Fitness: max 0.9090909090909091(6), min 0.0(1), ave 0.6262626262626263
----------------------------------------------------------------

2019-07-16 17:09:40 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2019-07-16 17:09:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 seconds
Variants: generated 100, syntax-valid 66, build-succeeded 11
Fitness: max 0.9090909090909091(2), min 0.0(5), ave 0.1983471074380165
----------------------------------------------------------------

2019-07-16 17:09:43 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2019-07-16 17:09:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 seconds
Variants: generated 100, syntax-valid 63, build-succeeded 5
Fitness: max 0.9090909090909091(2), min 0.09090909090909091(3), ave 0.41818181818181815
----------------------------------------------------------------

2019-07-16 17:09:45 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2019-07-16 17:09:48 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 seconds
Variants: generated 102, syntax-valid 62, build-succeeded 8
Fitness: max 0.9090909090909091(1), min 0.0(2), ave 0.17045454545454547
----------------------------------------------------------------

2019-07-16 17:09:48 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2019-07-16 17:09:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 seconds
Variants: generated 110, syntax-valid 74, build-succeeded 12
Fitness: max 0.9090909090909091(4), min 0.0(4), ave 0.3333333333333333
----------------------------------------------------------------

2019-07-16 17:09:50 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2019-07-16 17:09:53 [main] [INFO]  KGenProgMain - found enough solutions.
2019-07-16 17:09:53 [main] [INFO]  Patch - 
--- incorrect_overload.Class1
+++ incorrect_overload.Class1
@@ -7,6 +7,8 @@
 
 		int x, y;
 		x = sample.pow(a, n) % list.size(); // bug here
+		int res = 1;
+		x = sample.pow(a) % list.size();
 		y = sample.pow(a, n) % list.size();
 
 		ArrayList<Integer> subList = sample.getSubList(list, x, y);
2019-07-16 17:09:53 [main] [INFO]  Patch - 
--- incorrect_overload.Class2
+++ incorrect_overload.Class2
@@ -24,9 +24,8 @@
 
 
 	public ArrayList<Integer> getSubList(ArrayList<Integer> list, int l, int r){
-		if(l < 0 || r >= list.size() || l >= r) {
+		if(l < 0 || r >= list.size() || l >= r)
 			return null;
-		}
 
 		ArrayList<Integer> res = new ArrayList<Integer>();
 		for(; l < r; l++) {
2019-07-16 17:09:54 [main] [INFO]  KGenProgMain - execution time: 24 seconds
