2019-07-16 16:03:04 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
targetProject = .
executionTests = []
workingDir = /var/folders/fb/qqrpbwjd7cg3mc3d5hghr7k40000gn/T/kgenprog-work8447829265145134336
outDir = kgenprog-out
mutationGeneratingCount = 100
crossoverGeneratingCount = 100
headcount = 100
maxGeneration = 100
timeLimit = PT3M
testTimeLimit = PT30S
requiredSolutionsCount = 1
logLevel = INFO
randomSeed = 96
scope = PACKAGE
needNotOutput = false
currentDirectory = /Users/noy/Dropbox/研究/APRとテストケースの関係/2019study/src2/incorrect_overload
================================================================
2019-07-16 16:03:06 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2019-07-16 16:03:10 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 seconds
Variants: generated 100, syntax-valid 52, build-succeeded 7
Fitness: max 0.8333333333333334(6), min 0.16666666666666666(1), ave 0.7380952380952381
----------------------------------------------------------------

2019-07-16 16:03:10 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2019-07-16 16:03:13 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 seconds
Variants: generated 100, syntax-valid 68, build-succeeded 6
Fitness: max 0.8333333333333334(4), min 0.0(1), ave 0.6666666666666666
----------------------------------------------------------------

2019-07-16 16:03:13 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2019-07-16 16:03:16 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 seconds
Variants: generated 100, syntax-valid 63, build-succeeded 11
Fitness: max 0.8333333333333334(5), min 0.0(5), ave 0.393939393939394
----------------------------------------------------------------

2019-07-16 16:03:16 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2019-07-16 16:03:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 seconds
Variants: generated 100, syntax-valid 81, build-succeeded 16
Fitness: max 0.8333333333333334(5), min 0.0(6), ave 0.3125
----------------------------------------------------------------

2019-07-16 16:03:20 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2019-07-16 16:03:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 seconds
Variants: generated 100, syntax-valid 71, build-succeeded 10
Fitness: max 0.8333333333333334(3), min 0.0(1), ave 0.45
----------------------------------------------------------------

2019-07-16 16:03:23 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2019-07-16 16:03:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 seconds
Variants: generated 106, syntax-valid 75, build-succeeded 14
Fitness: max 0.8333333333333334(3), min 0.0(5), ave 0.2857142857142857
----------------------------------------------------------------

2019-07-16 16:03:26 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2019-07-16 16:03:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 seconds
Variants: generated 116, syntax-valid 77, build-succeeded 18
Fitness: max 0.8333333333333334(8), min 0.0(3), ave 0.43518518518518523
----------------------------------------------------------------

2019-07-16 16:03:29 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2019-07-16 16:03:33 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 seconds
Variants: generated 136, syntax-valid 73, build-succeeded 20
Fitness: max 0.8333333333333334(10), min 0.0(4), ave 0.5166666666666667
----------------------------------------------------------------

2019-07-16 16:03:33 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2019-07-16 16:03:36 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 seconds
Variants: generated 140, syntax-valid 73, build-succeeded 24
Fitness: max 0.8333333333333334(10), min 0.0(7), ave 0.3958333333333333
----------------------------------------------------------------

2019-07-16 16:03:36 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2019-07-16 16:03:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 seconds
Variants: generated 150, syntax-valid 85, build-succeeded 27
Fitness: max 0.8333333333333334(13), min 0.0(2), ave 0.48148148148148145
----------------------------------------------------------------

2019-07-16 16:03:39 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2019-07-16 16:03:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 36 seconds
Variants: generated 146, syntax-valid 80, build-succeeded 20
Fitness: max 0.8333333333333334(13), min 0.0(3), ave 0.575
----------------------------------------------------------------

2019-07-16 16:03:43 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2019-07-16 16:03:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 39 seconds
Variants: generated 154, syntax-valid 97, build-succeeded 29
Fitness: max 0.8333333333333334(20), min 0.0(4), ave 0.6379310344827587
----------------------------------------------------------------

2019-07-16 16:03:46 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2019-07-16 16:03:50 [main] [INFO]  KGenProgMain - found enough solutions.
2019-07-16 16:03:50 [main] [INFO]  Patch - 
--- incorrect_overload.Class1
+++ incorrect_overload.Class1
@@ -6,13 +6,14 @@
 		Class2 sample = new Class2();
 
 		int x, y;
-		x = sample.pow(a, n) % list.size(); // bug here
+		x = sample.pow(a) % list.size();
 		y = sample.pow(a, n) % list.size();
+		y = sample.pow(a, n) % list.size();
+		y = sample.pow(a, n) % list.size();
 
 		ArrayList<Integer> subList = sample.getSubList(list, x, y);
-		if(subList == null) {
+		if(subList == null)
 			return -1;
-		}
 
 		int sum = 0;
 		for(int i : subList) {
2019-07-16 16:03:50 [main] [INFO]  KGenProgMain - execution time: 43 seconds
