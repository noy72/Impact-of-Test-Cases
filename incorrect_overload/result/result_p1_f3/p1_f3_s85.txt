2019-07-16 23:05:38 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
targetProject = .
executionTests = []
workingDir = /var/folders/fb/qqrpbwjd7cg3mc3d5hghr7k40000gn/T/kgenprog-work8521975850483758164
outDir = kgenprog-out
mutationGeneratingCount = 100
crossoverGeneratingCount = 100
headcount = 100
maxGeneration = 100
timeLimit = PT3M
testTimeLimit = PT30S
requiredSolutionsCount = 1
logLevel = INFO
randomSeed = 85
scope = PACKAGE
needNotOutput = false
currentDirectory = /Users/noy/Dropbox/研究/APRとテストケースの関係/2019study/src2/incorrect_overload
================================================================
2019-07-16 23:05:40 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2019-07-16 23:05:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 seconds
Variants: generated 100, syntax-valid 54, build-succeeded 13
Fitness: max 0.36363636363636365(3), min 0.0(3), ave 0.13286713286713286
----------------------------------------------------------------

2019-07-16 23:05:43 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2019-07-16 23:05:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 seconds
Variants: generated 100, syntax-valid 79, build-succeeded 16
Fitness: max 0.9090909090909091(1), min 0.0(4), ave 0.2727272727272727
----------------------------------------------------------------

2019-07-16 23:05:45 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2019-07-16 23:05:47 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 seconds
Variants: generated 100, syntax-valid 68, build-succeeded 7
Fitness: max 0.9090909090909091(2), min 0.0(1), ave 0.3896103896103896
----------------------------------------------------------------

2019-07-16 23:05:47 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2019-07-16 23:05:50 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 seconds
Variants: generated 100, syntax-valid 67, build-succeeded 13
Fitness: max 0.9090909090909091(3), min 0.0(3), ave 0.3426573426573426
----------------------------------------------------------------

2019-07-16 23:05:50 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2019-07-16 23:05:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 12 seconds
Variants: generated 102, syntax-valid 67, build-succeeded 9
Fitness: max 0.9090909090909091(1), min 0.09090909090909091(3), ave 0.3333333333333333
----------------------------------------------------------------

2019-07-16 23:05:52 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2019-07-16 23:05:54 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 seconds
Variants: generated 104, syntax-valid 80, build-succeeded 19
Fitness: max 0.9090909090909091(5), min 0.0(4), ave 0.36363636363636365
----------------------------------------------------------------

2019-07-16 23:05:54 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2019-07-16 23:05:56 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 seconds
Variants: generated 110, syntax-valid 72, build-succeeded 20
Fitness: max 0.9090909090909091(3), min 0.0(3), ave 0.35454545454545455
----------------------------------------------------------------

2019-07-16 23:05:56 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2019-07-16 23:05:59 [main] [INFO]  KGenProgMain - found enough solutions.
2019-07-16 23:05:59 [main] [INFO]  Patch - 
--- incorrect_overload.Class1
+++ incorrect_overload.Class1
@@ -4,9 +4,12 @@
 public class Class1 {
 	public int run (ArrayList<Integer> list, int a, int n, int l, int h){
 		Class2 sample = new Class2();
+		int res = 1;
 
 		int x, y;
+		x = sample.pow(a, n) % list.size();
 		x = sample.pow(a, n) % list.size(); // bug here
+		x = sample.pow(a) % list.size();
 		y = sample.pow(a, n) % list.size();
 
 		ArrayList<Integer> subList = sample.getSubList(list, x, y);
2019-07-16 23:05:59 [main] [INFO]  KGenProgMain - execution time: 19 seconds
