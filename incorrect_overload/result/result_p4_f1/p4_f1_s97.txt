2019-07-16 19:19:06 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
targetProject = .
executionTests = []
workingDir = /var/folders/fb/qqrpbwjd7cg3mc3d5hghr7k40000gn/T/kgenprog-work7800987468017511951
outDir = kgenprog-out
mutationGeneratingCount = 100
crossoverGeneratingCount = 100
headcount = 100
maxGeneration = 100
timeLimit = PT3M
testTimeLimit = PT30S
requiredSolutionsCount = 1
logLevel = INFO
randomSeed = 97
scope = PACKAGE
needNotOutput = false
currentDirectory = /Users/noy/Dropbox/研究/APRとテストケースの関係/2019study/src2/incorrect_overload
================================================================
2019-07-16 19:19:08 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2019-07-16 19:19:11 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 seconds
Variants: generated 100, syntax-valid 51, build-succeeded 11
Fitness: max 0.9523809523809523(6), min 0.0(4), ave 0.5238095238095238
----------------------------------------------------------------

2019-07-16 19:19:11 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2019-07-16 19:19:14 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 5 seconds
Variants: generated 100, syntax-valid 71, build-succeeded 8
Fitness: max 0.9523809523809523(3), min 0.0(2), ave 0.375
----------------------------------------------------------------

2019-07-16 19:19:14 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2019-07-16 19:19:17 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 seconds
Variants: generated 100, syntax-valid 69, build-succeeded 8
Fitness: max 0.9523809523809523(1), min 0.0(3), ave 0.14285714285714285
----------------------------------------------------------------

2019-07-16 19:19:17 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2019-07-16 19:19:19 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 seconds
Variants: generated 100, syntax-valid 66, build-succeeded 10
Fitness: max 0.9523809523809523(2), min 0.0(4), ave 0.2095238095238095
----------------------------------------------------------------

2019-07-16 19:19:19 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2019-07-16 19:19:22 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 seconds
Variants: generated 100, syntax-valid 70, build-succeeded 12
Fitness: max 0.9523809523809523(3), min 0.0(1), ave 0.2698412698412698
----------------------------------------------------------------

2019-07-16 19:19:22 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2019-07-16 19:19:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 16 seconds
Variants: generated 104, syntax-valid 77, build-succeeded 7
Fitness: max 0.047619047619047616(5), min 0.0(2), ave 0.03401360544217687
----------------------------------------------------------------

2019-07-16 19:19:24 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2019-07-16 19:19:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 seconds
Variants: generated 110, syntax-valid 76, build-succeeded 16
Fitness: max 0.9523809523809523(2), min 0.0(7), ave 0.13988095238095238
----------------------------------------------------------------

2019-07-16 19:19:27 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2019-07-16 19:19:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 seconds
Variants: generated 110, syntax-valid 74, build-succeeded 15
Fitness: max 0.9523809523809523(2), min 0.0(3), ave 0.15873015873015872
----------------------------------------------------------------

2019-07-16 19:19:29 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2019-07-16 19:19:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 seconds
Variants: generated 126, syntax-valid 76, build-succeeded 21
Fitness: max 0.9523809523809523(6), min 0.0(6), ave 0.2925170068027211
----------------------------------------------------------------

2019-07-16 19:19:31 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2019-07-16 19:19:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 seconds
Variants: generated 130, syntax-valid 67, build-succeeded 16
Fitness: max 0.9523809523809523(3), min 0.0(5), ave 0.20238095238095236
----------------------------------------------------------------

2019-07-16 19:19:34 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2019-07-16 19:19:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 seconds
Variants: generated 154, syntax-valid 86, build-succeeded 28
Fitness: max 0.9523809523809523(6), min 0.0(4), ave 0.2346938775510204
----------------------------------------------------------------

2019-07-16 19:19:37 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2019-07-16 19:19:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 31 seconds
Variants: generated 158, syntax-valid 89, build-succeeded 30
Fitness: max 0.9523809523809523(10), min 0.0(5), ave 0.3412698412698412
----------------------------------------------------------------

2019-07-16 19:19:40 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2019-07-16 19:19:43 [main] [INFO]  KGenProgMain - found enough solutions.
2019-07-16 19:19:43 [main] [INFO]  Patch - 
--- incorrect_overload.Class1
+++ incorrect_overload.Class1
@@ -6,13 +6,12 @@
 		Class2 sample = new Class2();
 
 		int x, y;
-		x = sample.pow(a, n) % list.size(); // bug here
+		x = sample.pow(a) % list.size();
 		y = sample.pow(a, n) % list.size();
 
 		ArrayList<Integer> subList = sample.getSubList(list, x, y);
-		if(subList == null) {
+		if(subList == null)
 			return -1;
-		}
 
 		int sum = 0;
 		for(int i : subList) {
2019-07-16 19:19:43 [main] [INFO]  Patch - 
--- incorrect_overload.Class2
+++ incorrect_overload.Class2
@@ -8,6 +8,7 @@
 
 	public int pow(int a, int n) {
 		int res = 1;
+		int x, y;
 		for(int i = 0; i < n; i++) {
 			res *= a;
 		}
2019-07-16 19:19:44 [main] [INFO]  KGenProgMain - execution time: 35 seconds
