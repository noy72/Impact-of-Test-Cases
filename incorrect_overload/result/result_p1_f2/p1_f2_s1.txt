2019-07-16 19:22:17 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
targetProject = .
executionTests = []
workingDir = /var/folders/fb/qqrpbwjd7cg3mc3d5hghr7k40000gn/T/kgenprog-work7255680386957769
outDir = kgenprog-out
mutationGeneratingCount = 100
crossoverGeneratingCount = 100
headcount = 100
maxGeneration = 100
timeLimit = PT3M
testTimeLimit = PT30S
requiredSolutionsCount = 1
logLevel = INFO
randomSeed = 1
scope = PACKAGE
needNotOutput = false
currentDirectory = /Users/noy/Dropbox/研究/APRとテストケースの関係/2019study/src2/incorrect_overload
================================================================
2019-07-16 19:22:20 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2019-07-16 19:22:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 seconds
Variants: generated 100, syntax-valid 58, build-succeeded 7
Fitness: max 0.3333333333333333(3), min 0.16666666666666666(4), ave 0.23809523809523808
----------------------------------------------------------------

2019-07-16 19:22:23 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2019-07-16 19:22:26 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 seconds
Variants: generated 100, syntax-valid 64, build-succeeded 13
Fitness: max 0.3333333333333333(10), min 0.0(1), ave 0.28205128205128205
----------------------------------------------------------------

2019-07-16 19:22:26 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2019-07-16 19:22:29 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 9 seconds
Variants: generated 100, syntax-valid 65, build-succeeded 10
Fitness: max 0.3333333333333333(7), min 0.0(1), ave 0.26666666666666666
----------------------------------------------------------------

2019-07-16 19:22:29 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2019-07-16 19:22:32 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 seconds
Variants: generated 100, syntax-valid 64, build-succeeded 10
Fitness: max 0.3333333333333333(7), min 0.0(1), ave 0.26666666666666666
----------------------------------------------------------------

2019-07-16 19:22:32 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2019-07-16 19:22:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 seconds
Variants: generated 100, syntax-valid 67, build-succeeded 11
Fitness: max 0.3333333333333333(6), min 0.0(1), ave 0.2424242424242424
----------------------------------------------------------------

2019-07-16 19:22:34 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2019-07-16 19:22:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 seconds
Variants: generated 104, syntax-valid 73, build-succeeded 14
Fitness: max 0.3333333333333333(6), min 0.0(3), ave 0.20238095238095236
----------------------------------------------------------------

2019-07-16 19:22:37 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2019-07-16 19:22:39 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 19 seconds
Variants: generated 116, syntax-valid 78, build-succeeded 25
Fitness: max 0.8333333333333334(1), min 0.0(1), ave 0.30666666666666664
----------------------------------------------------------------

2019-07-16 19:22:39 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2019-07-16 19:22:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 23 seconds
Variants: generated 136, syntax-valid 91, build-succeeded 30
Fitness: max 0.8333333333333334(1), min 0.0(2), ave 0.26666666666666666
----------------------------------------------------------------

2019-07-16 19:22:43 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2019-07-16 19:22:46 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 26 seconds
Variants: generated 146, syntax-valid 82, build-succeeded 28
Fitness: max 0.8333333333333334(1), min 0.0(2), ave 0.27976190476190477
----------------------------------------------------------------

2019-07-16 19:22:46 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2019-07-16 19:22:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 29 seconds
Variants: generated 172, syntax-valid 85, build-succeeded 26
Fitness: max 0.8333333333333334(1), min 0.0(2), ave 0.3141025641025641
----------------------------------------------------------------

2019-07-16 19:22:49 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2019-07-16 19:22:53 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 seconds
Variants: generated 180, syntax-valid 106, build-succeeded 46
Fitness: max 0.8333333333333334(4), min 0.0(2), ave 0.34782608695652173
----------------------------------------------------------------

2019-07-16 19:22:53 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2019-07-16 19:22:56 [main] [INFO]  KGenProgMain - found enough solutions.
2019-07-16 19:22:56 [main] [INFO]  Patch - 
--- incorrect_overload.Class1
+++ incorrect_overload.Class1
@@ -8,6 +8,7 @@
 		int x, y;
 		x = sample.pow(a, n) % list.size(); // bug here
 		y = sample.pow(a, n) % list.size();
+		x = sample.pow(a) % list.size();
 
 		ArrayList<Integer> subList = sample.getSubList(list, x, y);
 		if(subList == null) {
2019-07-16 19:22:56 [main] [INFO]  Patch - 
--- incorrect_overload.Class2
+++ incorrect_overload.Class2
@@ -8,6 +8,7 @@
 
 	public int pow(int a, int n) {
 		int res = 1;
+		Class2 sample = new Class2();
 		for(int i = 0; i < n; i++) {
 			res *= a;
 		}
@@ -24,9 +25,10 @@
 
 
 	public ArrayList<Integer> getSubList(ArrayList<Integer> list, int l, int r){
-		if(l < 0 || r >= list.size() || l >= r) {
-			return null;
-		}
+		if(l < 0 || r >= list.size() || l >= r)
+			if (l < 0 || r >= list.size() || l >= r) {
+				return null;
+			}
 
 		ArrayList<Integer> res = new ArrayList<Integer>();
 		for(; l < r; l++) {
2019-07-16 19:22:56 [main] [INFO]  KGenProgMain - execution time: 36 seconds
