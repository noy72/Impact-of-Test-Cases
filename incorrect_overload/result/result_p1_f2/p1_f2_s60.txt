2019-07-16 20:37:17 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
targetProject = .
executionTests = []
workingDir = /var/folders/fb/qqrpbwjd7cg3mc3d5hghr7k40000gn/T/kgenprog-work5380232399360959829
outDir = kgenprog-out
mutationGeneratingCount = 100
crossoverGeneratingCount = 100
headcount = 100
maxGeneration = 100
timeLimit = PT3M
testTimeLimit = PT30S
requiredSolutionsCount = 1
logLevel = INFO
randomSeed = 60
scope = PACKAGE
needNotOutput = false
currentDirectory = /Users/noy/Dropbox/研究/APRとテストケースの関係/2019study/src2/incorrect_overload
================================================================
2019-07-16 20:37:20 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2019-07-16 20:37:24 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 4 seconds
Variants: generated 100, syntax-valid 56, build-succeeded 9
Fitness: max 0.3333333333333333(2), min 0.0(2), ave 0.16666666666666666
----------------------------------------------------------------

2019-07-16 20:37:24 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2019-07-16 20:37:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 7 seconds
Variants: generated 100, syntax-valid 70, build-succeeded 12
Fitness: max 0.3333333333333333(7), min 0.0(1), ave 0.25
----------------------------------------------------------------

2019-07-16 20:37:27 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2019-07-16 20:37:31 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 10 seconds
Variants: generated 100, syntax-valid 57, build-succeeded 6
Fitness: max 0.3333333333333333(2), min 0.16666666666666666(4), ave 0.2222222222222222
----------------------------------------------------------------

2019-07-16 20:37:31 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2019-07-16 20:37:34 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 14 seconds
Variants: generated 100, syntax-valid 61, build-succeeded 9
Fitness: max 0.3333333333333333(6), min 0.0(3), ave 0.2222222222222222
----------------------------------------------------------------

2019-07-16 20:37:34 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2019-07-16 20:37:37 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 17 seconds
Variants: generated 102, syntax-valid 70, build-succeeded 11
Fitness: max 0.3333333333333333(5), min 0.0(2), ave 0.2121212121212121
----------------------------------------------------------------

2019-07-16 20:37:37 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2019-07-16 20:37:40 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 20 seconds
Variants: generated 102, syntax-valid 61, build-succeeded 6
Fitness: max 0.3333333333333333(3), min 0.0(2), ave 0.19444444444444442
----------------------------------------------------------------

2019-07-16 20:37:40 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2019-07-16 20:37:43 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 22 seconds
Variants: generated 100, syntax-valid 64, build-succeeded 17
Fitness: max 0.3333333333333333(9), min 0.0(4), ave 0.2156862745098039
----------------------------------------------------------------

2019-07-16 20:37:43 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2019-07-16 20:37:45 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 25 seconds
Variants: generated 106, syntax-valid 78, build-succeeded 15
Fitness: max 0.3333333333333333(9), min 0.0(3), ave 0.23333333333333334
----------------------------------------------------------------

2019-07-16 20:37:45 [main] [INFO]  KGenProgMain - entered the era of 9th generation.
2019-07-16 20:37:49 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 28 seconds
Variants: generated 112, syntax-valid 77, build-succeeded 14
Fitness: max 0.8333333333333334(1), min 0.0(2), ave 0.2738095238095238
----------------------------------------------------------------

2019-07-16 20:37:49 [main] [INFO]  KGenProgMain - entered the era of 10th generation.
2019-07-16 20:37:52 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 32 seconds
Variants: generated 140, syntax-valid 101, build-succeeded 33
Fitness: max 0.8333333333333334(2), min 0.0(4), ave 0.25757575757575757
----------------------------------------------------------------

2019-07-16 20:37:52 [main] [INFO]  KGenProgMain - entered the era of 11th generation.
2019-07-16 20:37:55 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 35 seconds
Variants: generated 154, syntax-valid 89, build-succeeded 35
Fitness: max 0.8333333333333334(1), min 0.0(1), ave 0.3142857142857143
----------------------------------------------------------------

2019-07-16 20:37:55 [main] [INFO]  KGenProgMain - entered the era of 12th generation.
2019-07-16 20:38:00 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 40 seconds
Variants: generated 176, syntax-valid 103, build-succeeded 50
Fitness: max 0.8333333333333334(3), min 0.16666666666666666(7), ave 0.34
----------------------------------------------------------------

2019-07-16 20:38:00 [main] [INFO]  KGenProgMain - entered the era of 13th generation.
2019-07-16 20:38:04 [main] [INFO]  KGenProgMain - found enough solutions.
2019-07-16 20:38:04 [main] [INFO]  Patch - 
--- incorrect_overload.Class1
+++ incorrect_overload.Class1
@@ -6,13 +6,13 @@
 		Class2 sample = new Class2();
 
 		int x, y;
-		x = sample.pow(a, n) % list.size(); // bug here
+		x = sample.pow(a) % list.size();
+		ArrayList<Integer> res=new ArrayList<Integer>();
 		y = sample.pow(a, n) % list.size();
 
 		ArrayList<Integer> subList = sample.getSubList(list, x, y);
-		if(subList == null) {
+		if(subList == null)
 			return -1;
-		}
 
 		int sum = 0;
 		for(int i : subList) {
2019-07-16 20:38:04 [main] [INFO]  Patch - 
--- incorrect_overload.Class2
+++ incorrect_overload.Class2
@@ -8,6 +8,7 @@
 
 	public int pow(int a, int n) {
 		int res = 1;
+		int sum = 0;
 		for(int i = 0; i < n; i++) {
 			res *= a;
 		}
2019-07-16 20:38:05 [main] [INFO]  KGenProgMain - execution time: 45 seconds
