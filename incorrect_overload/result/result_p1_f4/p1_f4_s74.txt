2019-07-17 00:50:07 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
targetProject = .
executionTests = []
workingDir = /var/folders/fb/qqrpbwjd7cg3mc3d5hghr7k40000gn/T/kgenprog-work7720358679956370772
outDir = kgenprog-out
mutationGeneratingCount = 100
crossoverGeneratingCount = 100
headcount = 100
maxGeneration = 100
timeLimit = PT3M
testTimeLimit = PT30S
requiredSolutionsCount = 1
logLevel = INFO
randomSeed = 74
scope = PACKAGE
needNotOutput = false
currentDirectory = /Users/noy/Dropbox/研究/APRとテストケースの関係/2019study/src2/incorrect_overload
================================================================
2019-07-17 00:50:09 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2019-07-17 00:50:12 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 3 seconds
Variants: generated 100, syntax-valid 62, build-succeeded 11
Fitness: max 0.19047619047619047(4), min 0.0(1), ave 0.09523809523809522
----------------------------------------------------------------

2019-07-17 00:50:12 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2019-07-17 00:50:15 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 6 seconds
Variants: generated 100, syntax-valid 77, build-succeeded 19
Fitness: max 0.19047619047619047(11), min 0.0(4), ave 0.12030075187969924
----------------------------------------------------------------

2019-07-17 00:50:15 [main] [INFO]  KGenProgMain - entered the era of 3rd generation.
2019-07-17 00:50:18 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 8 seconds
Variants: generated 100, syntax-valid 68, build-succeeded 11
Fitness: max 0.19047619047619047(6), min 0.0(4), ave 0.10822510822510822
----------------------------------------------------------------

2019-07-17 00:50:18 [main] [INFO]  KGenProgMain - entered the era of 4th generation.
2019-07-17 00:50:20 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 11 seconds
Variants: generated 102, syntax-valid 71, build-succeeded 15
Fitness: max 0.9523809523809523(1), min 0.0(3), ave 0.16507936507936508
----------------------------------------------------------------

2019-07-17 00:50:20 [main] [INFO]  KGenProgMain - entered the era of 5th generation.
2019-07-17 00:50:23 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 13 seconds
Variants: generated 100, syntax-valid 75, build-succeeded 10
Fitness: max 0.9523809523809523(1), min 0.0(2), ave 0.21428571428571427
----------------------------------------------------------------

2019-07-17 00:50:23 [main] [INFO]  KGenProgMain - entered the era of 6th generation.
2019-07-17 00:50:25 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 15 seconds
Variants: generated 104, syntax-valid 77, build-succeeded 16
Fitness: max 0.9523809523809523(3), min 0.19047619047619047(13), ave 0.3333333333333333
----------------------------------------------------------------

2019-07-17 00:50:25 [main] [INFO]  KGenProgMain - entered the era of 7th generation.
2019-07-17 00:50:27 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 18 seconds
Variants: generated 124, syntax-valid 88, build-succeeded 25
Fitness: max 0.9523809523809523(4), min 0.0(7), ave 0.2533333333333333
----------------------------------------------------------------

2019-07-17 00:50:27 [main] [INFO]  KGenProgMain - entered the era of 8th generation.
2019-07-17 00:50:30 [main] [INFO]  KGenProgMain - found enough solutions.
2019-07-17 00:50:30 [main] [INFO]  Patch - 
--- incorrect_overload.Class1
+++ incorrect_overload.Class1
@@ -7,9 +7,11 @@
 
 		int x, y;
 		x = sample.pow(a, n) % list.size(); // bug here
+		x = sample.pow(a) % list.size();
 		y = sample.pow(a, n) % list.size();
 
 		ArrayList<Integer> subList = sample.getSubList(list, x, y);
+		x = sample.pow(a, n) % list.size();
 		if(subList == null) {
 			return -1;
 		}
2019-07-17 00:50:30 [main] [INFO]  Patch - 
--- incorrect_overload.Class2
+++ incorrect_overload.Class2
@@ -24,9 +24,8 @@
 
 
 	public ArrayList<Integer> getSubList(ArrayList<Integer> list, int l, int r){
-		if(l < 0 || r >= list.size() || l >= r) {
+		if(l < 0 || r >= list.size() || l >= r)
 			return null;
-		}
 
 		ArrayList<Integer> res = new ArrayList<Integer>();
 		for(; l < r; l++) {
2019-07-17 00:50:30 [main] [INFO]  KGenProgMain - execution time: 21 seconds
