2019-07-17 00:13:55 [main] [INFO]  KGenProgMain - 
==================== kGenProg Configuration ====================
targetProject = .
executionTests = []
workingDir = /var/folders/fb/qqrpbwjd7cg3mc3d5hghr7k40000gn/T/kgenprog-work8582207321013326322
outDir = kgenprog-out
mutationGeneratingCount = 100
crossoverGeneratingCount = 100
headcount = 100
maxGeneration = 100
timeLimit = PT3M
testTimeLimit = PT30S
requiredSolutionsCount = 1
logLevel = INFO
randomSeed = 40
scope = PACKAGE
needNotOutput = false
currentDirectory = /Users/noy/Dropbox/研究/APRとテストケースの関係/2019study/src2/incorrect_overload
================================================================
2019-07-17 00:13:56 [main] [INFO]  KGenProgMain - entered the era of 1st generation.
2019-07-17 00:13:59 [main] [INFO]  KGenProgMain - 
----------------------------------------------------------------
Elapsed time: 2 seconds
Variants: generated 100, syntax-valid 53, build-succeeded 6
Fitness: max 0.19047619047619047(2), min 0.0(1), ave 0.08730158730158728
----------------------------------------------------------------

2019-07-17 00:13:59 [main] [INFO]  KGenProgMain - entered the era of 2nd generation.
2019-07-17 00:14:01 [main] [INFO]  KGenProgMain - found enough solutions.
2019-07-17 00:14:01 [main] [INFO]  Patch - 
--- incorrect_overload.Class1
+++ incorrect_overload.Class1
@@ -6,7 +6,7 @@
 		Class2 sample = new Class2();
 
 		int x, y;
-		x = sample.pow(a, n) % list.size(); // bug here
+		x = sample.pow(a) % list.size();
 		y = sample.pow(a, n) % list.size();
 
 		ArrayList<Integer> subList = sample.getSubList(list, x, y);
2019-07-17 00:14:01 [main] [INFO]  Patch - 
--- incorrect_overload.Class2
+++ incorrect_overload.Class2
@@ -8,6 +8,7 @@
 
 	public int pow(int a, int n) {
 		int res = 1;
+		Class2 sample = new Class2();
 		for(int i = 0; i < n; i++) {
 			res *= a;
 		}
2019-07-17 00:14:01 [main] [INFO]  KGenProgMain - execution time: 4 seconds
